generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model SplitEntry {
  id                 Int      @id @default(autoincrement())
  destinationAddress String   @db.Char(42)
  splitterId         Int
  percent            Float
  Splitter           Splitter @relation(fields: [splitterId], references: [id])
}

model Splitter {
  id                                      Int          @id @default(autoincrement())
  splitterAddress                         String?      @db.Char(42)
  Drop_Drop_primarySplitterIdToSplitter   Drop[]       @relation("Drop_primarySplitterIdToSplitter")
  Drop_Drop_secondarySplitterIdToSplitter Drop[]       @relation("Drop_secondarySplitterIdToSplitter")
  SplitterEntries                         SplitEntry[]
}

model WhitelistEntry {
  id          Int           @id @default(autoincrement())
  whitelistId Int
  minBalance  String?
  tokenId     BigInt?
  type        WhitelistType
  Whitelist   Whitelist     @relation(fields: [whitelistId], references: [id])
}

model Whitelist {
  id               Int              @id @default(autoincrement())
  contractAddress  String           @db.Char(42)
  Drop             Drop[]
  WhitelistEntries WhitelistEntry[]
}

model Auction {
  ERC20Address  String   @db.Char(42)
  buyNowPrice   String?
  endTime       DateTime
  minimumPrice  String?
  settled       Boolean
  startTime     DateTime
  dropId        Int
  id            Int      @id @default(autoincrement())
  lastUpdatedAt DateTime
  Drop          Drop     @relation(fields: [dropId], references: [id])
  Nft           Nft[]
}

model Nft {
  id                             Int          @id @default(autoincrement())
  name                           String
  description                    String
  rarity                         String
  ipfsPath                       String
  s3Path                         String
  tags                           String
  isVideo                        Boolean      @default(false)
  numberOfEditions               Int          @default(0)
  auctionId                      Int?
  lotteryId                      Int?
  Auction                        Auction?     @relation(fields: [auctionId], references: [id])
  Lottery_LotteryToNft_lotteryId Lottery?     @relation("LotteryToNft_lotteryId", fields: [lotteryId], references: [id])
  Lottery                        Lottery[]
  PrizeProof                     PrizeProof[]
}

model PrizeProof {
  winnerAddress String    @db.Char(42)
  proof         String
  claimedAt     DateTime?
  createdAt     DateTime
  nftId         Int
  amount        Int
  lotteryId     Int
  Nft           Nft       @relation(fields: [nftId], references: [id])

  @@id([lotteryId, winnerAddress, nftId])
}

model MemeTransactions {
  blockNumber    Int
  blockTimestamp Int
  from           String    @db.Char(42)
  to             String    @db.Char(42)
  value          String
  assetType      AssetType
  id             Int       @id @default(autoincrement())
  txHash         String    @db.Char(66)

  @@index([from, to])
}

model EarnedPoints {
  address           String   @id @db.Char(42)
  totalPointsEarned BigInt   @default(0)
  proof             String
  updatedAt         DateTime @default(now())
  User              User     @relation(fields: [address], references: [walletAddress])
}

model RewardType {
  type               AssetType @id
  rewardRate         Float
  lastBlockInspected Int
  chainId            Int
  contract           String    @db.Char(42)
  startingBlock      Int
  positionSizeLimit  String    @default("0")
}

model User {
  walletAddress                 String        @id @db.Char(42)
  email                         String?       @unique
  createdAt                     DateTime      @default(now())
  role                          Role          @default(USER)
  bio                           String?       @db.VarChar(200)
  profilePicture                String?
  username                      String?
  Drop_Drop_approvedByToUser    Drop[]        @relation("Drop_approvedByToUser")
  Drop_Drop_artistAddressToUser Drop[]        @relation("Drop_artistAddressToUser")
  EarnedPoints                  EarnedPoints?
  Drop_userFavoriteDrops        Drop[]        @relation("userFavoriteDrops")

  @@index([walletAddress])
}

model Lottery {
  blockchainCreatedAt        DateTime?
  costPerTicketCoins         Float     @default(0.0)
  costPerTicketPoints        Int       @default(0)
  defaultPrizeId             Int?
  finished                   Boolean   @default(false)
  endTime                    Int
  startTime                  Int
  dropId                     Int
  id                         Int       @id @default(autoincrement())
  maxTickets                 Int       @default(0)
  Nft                        Nft?      @relation(fields: [defaultPrizeId], references: [id])
  Drop                       Drop      @relation(fields: [dropId], references: [id])
  Nft_LotteryToNft_lotteryId Nft[]     @relation("LotteryToNft_lotteryId")
}

model Drop {
  id                                          Int        @id @default(autoincrement())
  primarySplitterId                           Int?
  secondarySplitterId                         Int?
  whitelistId                                 Int?
  createdAt                                   DateTime   @default(now())
  royaltyPercentage                           Float      @default(0.0)
  approvedAt                                  DateTime?
  approvedBy                                  String?    @db.Char(42)
  bannerImageS3Path                           String
  dropMetadataCid                             String
  description                                 String
  metadataS3Path                              String
  tags                                        String
  isLive                                      Boolean
  artistAddress                               String     @db.Char(42)
  User_Drop_approvedByToUser                  User?      @relation("Drop_approvedByToUser", fields: [approvedBy], references: [walletAddress])
  User_Drop_artistAddressToUser               User       @relation("Drop_artistAddressToUser", fields: [artistAddress], references: [walletAddress])
  Splitter_Drop_primarySplitterIdToSplitter   Splitter?  @relation("Drop_primarySplitterIdToSplitter", fields: [primarySplitterId], references: [id])
  Splitter_Drop_secondarySplitterIdToSplitter Splitter?  @relation("Drop_secondarySplitterIdToSplitter", fields: [secondarySplitterId], references: [id])
  Whitelist                                   Whitelist? @relation(fields: [whitelistId], references: [id])
  Auction                                     Auction[]
  Lottery                                     Lottery[]
  User_userFavoriteDrops                      User[]     @relation("userFavoriteDrops")
}

enum AssetType {
  ETH_MEMEINU
  FTM_MEMEINU
  FTM_LIQUIDITY
}

enum Role {
  USER
  ARTIST
  ADMIN
}

enum WhitelistType {
  WALLET
  ERC20
  ERC721
  ERC1155
  MERKLE
}
